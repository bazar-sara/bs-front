# React Native/Expo Project

You are an expert in TypeScript, React JS, MUI, and Web UI development with MUI.

Every time you choose to apply a rule(s), explicitly state the rule(s) in the output. You can abbreviate the rule description to a single word or phrase.

## Project Context

## Code Style and Structure

- Write concise, technical TypeScript code with accurate examples
- Use functional and declarative programming patterns; avoid classes
- Prefer iteration and modularization over code duplication
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError)
- Ensure components are modular, reusable, and maintainable.
- Component Modularity: Break down components into smaller, reusable pieces. Keep components focused on a single responsibility and shouldn't be more than 80 lines of code.
- To install new packages use `yarn add <package-name>`
- Structure repository files as follows:

```


  ├── packages  ## shared components
  │   ├── core  ## UI components following atomic design
  │   │   ├── Atom  ## Basic UI elements (Button, Chip, Typography, IconButton, Tooltip, SolarIcon, Description)
  │   │   └── Organ  ## Complex UI components (Alert, Modal, Table, Charts, NavigationMenu, Tree, Tabs, Stepper, Pagination, Editor, Player)
  │   ├── form  ## form components and validation system
  │   │   ├── FormFields  ## Input components (Input, Select, DatePicker, Checkbox, RadioGroup, UploadFile, etc.)
  │   │   ├── FormProvider  ## Form context and provider
  │   │   ├── validators  ## Validation functions (email, password, Persian validators)
  │   │   └── useExtractErrorInfo  ## Error handling hook
  │   └── utils  ## utility functions and helpers
  │       ├── helper  ## Common utilities (LocalStorage, Scroll, TruncateText, etc.)
  │       ├── http  ## HTTP client and React Query setup
  │       ├── i18Next  ## Internationalization utilities
  │       ├── PageProvider  ## Page context provider
  │       └── theme  ## Theme management and templates
  ├── src  ## main source of project
  │   ├── main.tsx  ## Application entry point
  │   ├── App.tsx  ## Root component
  │   ├── App.css  ## Global styles
  │   ├── assets  ## Static assets
  │   │   ├── fonts  ## Font files (IranSans)
  │   │   └── images  ## Image assets (SVG, PNG, JPG)
  │   ├── common  ## Shared application logic
  │   │   ├── components  ## Reusable components (Layout, Loading, Animations, etc.)
  │   │   ├── consts  ## Constants (BPMN configurations)
  │   │   ├── contexts  ## React contexts (BPMN, User, PageInfo, Permissions)
  │   │   ├── helpers  ## Helper functions (BPMN utilities, i18n helpers)
  │   │   └── hooks  ## Custom hooks (BPMN hooks, utility hooks)
  │   ├── i18n  ## Internationalization files (en.json, fa.json)
  │   ├── pages  ## Application pages
  │   │   ├── Home  ## Main application with subpages (BPMN, Cartable, Dashboard, DataManagement, FormEngine, Settings, UserManagement, UiComponents)
  │   │   ├── Login  ## Authentication pages
  │   │   ├── Signup  ## User registration
  │   │   └── error.tsx  ## Error page
  │   ├── routes  ## Routing configuration
  │   │   ├── AppRoutes.tsx  ## Main router setup
  │   │   ├── routes.tsx  ## Route definitions
  │   │   └── type.ts  ## Route type definitions
  │   └── types  ## TypeScript type definitions
  │       ├── apiResponse.ts  ## API response types
  │       └── index.ts  ## Type exports
  ├── public  ## Public static files
  ├── configs  ## Configuration files (nginx.conf)
  ├── dist  ## Build output directory
  └── ...   ## root files (package.json, tsconfig.json, vite.config.ts, eslint.config.js, etc.)

```

## Tech Stack

- React JS
- TypeScript
- MUI
- React Router Dom
- React Query
- Mui icons-material

## Naming Conventions

- Favor named exports for components and utilities
- Use kebabCase for all files names and directories (e.g., visa-form.tsx)

## TypeScript Usage

- Use TypeScript for all code; prefer types over interfaces
- Avoid enums; use const objects with 'as const' assertion
- Use functional components with TypeScript interfaces
- Define strict types for message passing between different parts of the extension
- Use absolute imports for all files @/...
- Avoid try/catch blocks unless there's good reason to translate or handle error in that abstraction
- Use explicit return types for all functions

## Syntax and Formatting

- Use "arrow functions with const" for functions
- Avoid unnecessary curly braces in conditionals
- Use declarative JSX
- Implement proper TypeScript discriminated unions for message types

## UI and Styling

- Use MUI for styling and components
- First use FS ui components such as FsCheckbox, FsInput from `@fs/form` and `@fs/core` and `@fs/utils`
- Then use built-in MUI ui components such as Button, Input from `@mui/material`
- Ensure high accessibility (a11y) standards using ARIA roles and native accessibility props.
- Avoid unnecessary re-renders by memoizing components and using useMemo and useCallback hooks appropriately.
- Make sure to use defined colors and fonts in the theme (MUI theme).

Here is a simple example of how a component should be written using :

```tsx
import { useAlert } from '@fs/core';
import { FsFormProvider } from '@fs/form';
import { useService } from '@fs/utils';
import { Box } from '@mui/material';
import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { useNavigate } from 'react-router-dom';
import { Footer } from 'src/common/components/Layout';
import type { LoginServiceActions } from '../loginService';
import { useLoginBg } from './getLoginBackground';
import SetPostStep from './Steps/SetPostStep';
import LoginStep from './Steps/LoginStep';
import './login.css';

const Login = () => {
  const [captchaGuid, setCaptchaGuid] = useState('');
  const [isLogin, setIsLogin] = useState(false);

  const { triggerAlert } = useAlert();
  const methods = useForm();

  const navigate = useNavigate();
  const { mutate: loginMutate, isLoading: loginLoading } = useService<
    LoginServiceActions,
    'login',
    'login'
  >('login', 'login');
  const { mutate: setPostMutate, isLoading: setPostLoading } = useService<
    LoginServiceActions,
    'login',
    'setPost'
  >('login', 'setPost');
  const {
    mutate: getAllPostsMutate,
    isLoading: getAllPostsIsLoading,
    data: allPostsData,
  } = useService<LoginServiceActions, 'login', 'getAllPosts'>(
    'login',
    'getAllPosts'
  );

  const onSubmit = (data: any) => {
    if (isLogin) {
      setPostMutate(
        { postId: data?.postId },
        {
          onSuccess: () => {
            navigate('/');
            triggerAlert('ورود با موفقیت انجام شد');
          },
        }
      );
    } else {
      loginMutate(
        { ...data, captchaGuid },
        {
          onSuccess() {
            getAllPostsMutate(undefined, {
              onSuccess: (resp) => {
                if (resp.length === 1) {
                  setPostMutate(
                    { postId: resp[0]?.id },
                    {
                      onSuccess: () => {
                        navigate('/');
                        triggerAlert('ورود با موفقیت انجام شد');
                      },
                    }
                  );
                } else {
                  setIsLogin(true);
                }
              },
            });
          },
        }
      );
    }
  };

  const bg = useLoginBg();

  return (
    <Box
      sx={{
        backgroundImage: `url(${bg})`,
        backgroundSize: '100% 50vh',
        backgroundPosition: 'top',
        backgroundRepeat: 'no-repeat',
        height: '100vh',
        overflow: 'hidden',
        display: 'flex',
        flexDirection: 'column',
      }}
    >
      <FsFormProvider
        formProps={{ onSubmit: methods.handleSubmit(onSubmit) }}
        methods={methods}
        name={'logInForm'}
      >
        <Box
          sx={{
            height: '100vh',
            overflow: 'hidden',
            display: 'flex',
            flexDirection: 'column',
          }}
        >
          {!isLogin && (
            <LoginStep
              setCaptchaGuid={setCaptchaGuid}
              loginLoading={loginLoading}
              setPostLoading={setPostLoading}
            />
          )}
          {isLogin && (
            <SetPostStep
              showAnimation={isLogin}
              allPostsData={allPostsData}
              getAllPostsIsLoading={getAllPostsIsLoading}
              loginLoading={loginLoading}
              setPostLoading={setPostLoading}
            />
          )}
        </Box>
      </FsFormProvider>
      <Footer />
    </Box>
  );
};
export default Login;
```

## Error Handling

- Log errors appropriately for debugging
- Provide user-friendly error messages

<!-- ## Testing

- Write unit tests using Jest and React Native Testing Library.
- Write unit tests for utilities and complex components
- The test file should be named like the component file but with the .test.tsx extension (e.g., component-name.test.tsx)
- Do not write unit tests for simple components that only show data -->

## Git Usage

Commit Message Prefixes:

- "fix:" for bug fixes
- "feat:" for new features
- "perf:" for performance improvements
- "docs:" for documentation changes
- "style:" for formatting changes
- "refactor:" for code refactoring
- "test:" for adding missing tests
- "chore:" for maintenance tasks

Rules:

- Use lowercase for commit messages
- Keep the summary line concise with a maximum of 100 characters
- Reference issue numbers when applicable

## Documentation

- Maintain clear README with the following sections:
  - Setup ( how to install and run the project )
  - Usage ( listing all the commands and how to use them )
  - Stack ( the tech stack used in the project )
  - Folder Structure ( the folder structure of the project only the important ones inside src )
