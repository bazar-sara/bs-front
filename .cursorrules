You are an expert in TypeScript, React JS, Next JS MUI, and Web UI development with MUI.

Every time you choose to apply a rule(s), explicitly state the rule(s) in the output. You can abbreviate the rule description to a single word or phrase.

## Project Context

## Code Style and Structure

- Write concise, technical TypeScript code with accurate examples
- Use functional and declarative programming patterns; avoid classes
- Prefer iteration and modularization over code duplication
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError)
- Ensure components are modular, reusable, and maintainable.
- Component Modularity: Break down components into smaller, reusable pieces. Keep components focused on a single responsibility and shouldn't be more than 80 lines of code.
- To install new packages use `yarn add <package-name>`
- Structure repository files as follows:

```
src
 ┣ app
 ┃ ┣ (self)
 ┃ ┃ ┗ i18n
 ┃ ┃ ┃ ┣ en.json
 ┃ ┃ ┃ ┗ fa.json
 ┃ ┣ dashboard
 ┃ ┃ ┣ (self)
 ┃ ┃ ┃ ┣ components
 ┃ ┃ ┃ ┃ ┗ index.tsx
 ┃ ┃ ┃ ┗ i18n
 ┃ ┃ ┃ ┃ ┣ en.json
 ┃ ┃ ┃ ┃ ┗ fa.json
 ┃ ┃ ┣ layout.tsx
 ┃ ┃ ┗ page.tsx
 ┃ ┣ login
 ┃ ┃ ┣ (self)
 ┃ ┃ ┃ ┣ components
 ┃ ┃ ┃ ┃ ┗ index.tsx
 ┃ ┃ ┃ ┗ i18n
 ┃ ┃ ┃ ┃ ┣ en.json
 ┃ ┃ ┃ ┃ ┗ fa.json
 ┃ ┃ ┣ layout.tsx
 ┃ ┃ ┗ page.tsx
 ┃ ┣ public
 ┃ ┃ ┣ (self)
 ┃ ┃ ┃ ┣ components
 ┃ ┃ ┃ ┃ ┗ index.tsx
 ┃ ┃ ┃ ┗ i18n
 ┃ ┃ ┃ ┃ ┣ en.json
 ┃ ┃ ┃ ┃ ┗ fa.json
 ┃ ┃ ┣ layout.tsx
 ┃ ┃ ┗ page.tsx
 ┃ ┣ sign-up
 ┃ ┃ ┣ (self)
 ┃ ┃ ┃ ┣ components
 ┃ ┃ ┃ ┃ ┗ index.tsx
 ┃ ┃ ┃ ┗ i18n
 ┃ ┃ ┃ ┃ ┣ en.json
 ┃ ┃ ┃ ┃ ┗ fa.json
 ┃ ┃ ┣ layout.tsx
 ┃ ┃ ┗ page.tsx
 ┃ ┣ ui-components
 ┃ ┃ ┣ (self)
 ┃ ┃ ┃ ┣ components
 ┃ ┃ ┃ ┃ ┗ index.tsx
 ┃ ┃ ┃ ┗ i18n
 ┃ ┃ ┃ ┃ ┣ en.json
 ┃ ┃ ┃ ┃ ┗ fa.json
 ┃ ┃ ┣ layout.tsx
 ┃ ┃ ┗ page.tsx
 ┃ ┣ favicon.ico
 ┃ ┣ globals.css
 ┃ ┣ layout.tsx
 ┃ ┣ page.module.css
 ┃ ┗ page.tsx
 ┣ assets
 ┃ ┣ fonts
 ┃ ┃ ┗ iranSans
 ┃ ┃ ┃ ┣ webfont
 ┃ ┃ ┃ ┃ ┣ staticfonts
 ┃ ┃ ┃ ┃ ┃ ┣ IRANSansX-Bold.woff
 ┃ ┃ ┃ ┃ ┃ ┗ IRANSansX-Regular.woff
 ┃ ┃ ┃ ┃ ┣ IRANSansXV.woff
 ┃ ┃ ┃ ┃ ┗ IRANSansXV.woff2
 ┃ ┃ ┃ ┗ IRANSansXVF.ttf
 ┃ ┗ images
 ┃ ┃ ┗ files
 ┃ ┃ ┃ ┣ excel.svg
 ┃ ┃ ┃ ┣ gif.svg
 ┃ ┃ ┃ ┣ html.svg
 ┃ ┃ ┃ ┣ jpeg.svg
 ┃ ┃ ┃ ┣ jpg.svg
 ┃ ┃ ┃ ┣ json.svg
 ┃ ┃ ┃ ┣ mov.svg
 ┃ ┃ ┃ ┣ mp3.svg
 ┃ ┃ ┃ ┣ pdf.svg
 ┃ ┃ ┃ ┣ png.svg
 ┃ ┃ ┃ ┣ rar.svg
 ┃ ┃ ┃ ┣ svg.svg
 ┃ ┃ ┃ ┣ txt.svg
 ┃ ┃ ┃ ┣ uploadFileLoading.svg
 ┃ ┃ ┃ ┣ word.svg
 ┃ ┃ ┃ ┣ xls.svg
 ┃ ┃ ┃ ┗ zip.svg
 ┗ i18n
 ┃ ┗ request.ts
 
```

## Tech Stack

- React JS
- Next JS
- TypeScript
- MUI v7
- React Query
- Mui icons-material
- Mui x-charts
- Mui x-data-grid
- Mui x-date-pickers
- Mui x-tree-view
- Mui x-charts
- Mui x-data-grid
- Mui x-date-pickers
- Mui x-tree-view

## Naming Conventions

- Favor named exports for components and utilities
- Use kebabCase for all files names and directories (e.g., visa-form.tsx)

## TypeScript Usage

- Use TypeScript for all code; prefer types over interfaces
- Avoid enums; use const objects with 'as const' assertion
- Use functional components with TypeScript interfaces
- Define strict types for message passing between different parts of the extension
- Use absolute imports for all files @/...
- Avoid try/catch blocks unless there's good reason to translate or handle error in that abstraction
- Use explicit return types for all functions

## Syntax and Formatting

- Use "arrow functions with const" for functions
- Avoid unnecessary curly braces in conditionals
- Use declarative JSX
- Implement proper TypeScript discriminated unions for message types

## UI and Styling

- Use MUI for styling and components
- First use FS ui components such as FsCheckbox, FsInput from `@fs/form` and `@fs/core` and `@fs/utils`
- Then use built-in MUI ui components such as Button, Input from `@mui/material`
- Ensure high accessibility (a11y) standards using ARIA roles and native accessibility props.
- Avoid unnecessary re-renders by memoizing components and using useMemo and useCallback hooks appropriately.
- Make sure to use defined colors and fonts in the theme (MUI theme).

Here is a simple example of how a component should be written using :

```tsx
'use client';
import { FsButton, FsTypography } from '@fs/core';
import { FsFormProvider, FsInput } from '@fs/form';
import { Box, Grid, Paper } from '@mui/material';
import { styled } from '@mui/material/styles';
import { useRouter } from 'next/navigation';
import { useEffect, useState } from 'react';
import { useForm } from 'react-hook-form';

const GradientBackground = styled('div')(({ theme }) => ({
  position: 'fixed',
  top: 0,
  left: 0,
  width: '100%',
  height: '100%',
  background: `linear-gradient(-45deg, ${theme.palette.primary.light} 0%, ${theme.palette.secondary.light} 100%)`,
  backgroundSize: '400% 400%',
  animation: 'gradient 15s ease infinite',
  zIndex: -1,
  '@keyframes gradient': {
    '0%': { backgroundPosition: '0% 50%' },
    '50%': { backgroundPosition: '100% 50%' },
    '100%': { backgroundPosition: '0% 50%' },
  },
}));

const FloatingCircles = styled('div')(({ theme }) => ({
  position: 'fixed',
  top: 0,
  left: 0,
  width: '100%',
  height: '100%',
  overflow: 'hidden',
  zIndex: -1,
  '&::before, &::after': {
    content: '""',
    position: 'absolute',
    borderRadius: '50%',
    filter: 'blur(80px)',
    opacity: 0.15,
    animation: 'float 25s linear infinite',
  },
  '&::before': {
    width: '40vmax',
    height: '40vmax',
    background: theme.palette.primary.main,
    top: '10%',
    left: '10%',
  },
  '&::after': {
    width: '60vmax',
    height: '60vmax',
    background: theme.palette.secondary.main,
    bottom: '10%',
    right: '10%',
    animationDelay: '10s',
  },
  '@keyframes float': {
    '0%': { transform: 'translate(0, 0) rotate(0deg)' },
    '25%': { transform: 'translate(5vw, 10vh) rotate(90deg)' },
    '50%': { transform: 'translate(0, 20vh) rotate(180deg)' },
    '75%': { transform: 'translate(-5vw, 10vh) rotate(270deg)' },
    '100%': { transform: 'translate(0, 0) rotate(360deg)' },
  },
}));

const Login = () => {
  const [mounted, setMounted] = useState(false);
  const methods = useForm();
  const router = useRouter();
  useEffect(() => {
    setMounted(true);
  }, []);

  const navigateToSignup = () => {
    router.push('/sign-up');
  };

  return (
    <Box
      sx={{
        minHeight: '100vh',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        position: 'relative',
        overflow: 'hidden',
        p: 2,
      }}
    >
      {mounted && (
        <>
          <GradientBackground />
          <FloatingCircles />
        </>
      )}

      <Paper
        elevation={10}
        sx={{
          width: '100%',
          maxWidth: 450,
          p: 4,
          borderRadius: 4,
          backdropFilter: 'blur(8px)',
          backgroundColor: 'rgba(255, 255, 255, 0.85)',
          boxShadow: '0 8px 32px rgba(0, 0, 0, 0.1)',
          transform: mounted ? 'translateY(0)' : 'translateY(20px)',
          opacity: mounted ? 1 : 0,
          transition: 'all 0.5s ease-out',
        }}
      >
        <FsTypography
          i18nKey={'Welcome Back'}
          variant="h4"
          component="h1"
          align="center"
          sx={{ mb: 3, fontWeight: 700 }}
        />
        <FsFormProvider name="login" methods={methods}>
          <Grid
            container
            gap={3}
            display={'flex'}
            justifyContent={'center'}
            flexDirection={'column'}
          >
            <Grid>
              <FsInput
                name="email"
                fullWidth
                i18nKey="Email Address"
                variant="outlined"
                sx={{
                  '& .MuiOutlinedInput-root': {
                    borderRadius: 2,
                  },
                }}
              />
            </Grid>
            <Grid>
              <FsInput
                name="password"
                fullWidth
                i18nKey="Password"
                type="password"
                variant="outlined"
                sx={{
                  '& .MuiOutlinedInput-root': {
                    borderRadius: 2,
                  },
                }}
              />
            </Grid>
          </Grid>
          <FsButton
            type="submit"
            fullWidth
            variant="contained"
            sx={{
              mt: 3,
              mb: 2,
              py: 1.5,
              borderRadius: 2,
              fontSize: '1rem',
              fontWeight: 600,
              background: 'linear-gradient(45deg, #1976d2 0%, #2196f3 100%)',
              boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',
              '&:hover': {
                boxShadow: '0 6px 8px rgba(0, 0, 0, 0.15)',
              },
            }}
            i18nKey="Sign In"
          />
          <FsTypography variant="body2" align="center" sx={{ mt: 2 }}>
            Don&apos;t have an account?
            <FsButton
              sx={{ mx: 1 }}
              i18nKey="Create account"
              onClick={navigateToSignup}
            />
          </FsTypography>
        </FsFormProvider>
      </Paper>
    </Box>
  );
};

export default Login;
```

## Error Handling

- Log errors appropriately for debugging
- Provide user-friendly error messages

<!-- ## Testing

- Write unit tests for utilities and complex components
- The test file should be named like the component file but with the .test.tsx extension (e.g., component-name.test.tsx)
- Do not write unit tests for simple components that only show data -->

## Git Usage

Commit Message Prefixes:

- "fix:" for bug fixes
- "feat:" for new features
- "perf:" for performance improvements
- "docs:" for documentation changes
- "style:" for formatting changes
- "refactor:" for code refactoring
- "test:" for adding missing tests
- "chore:" for maintenance tasks

Rules:

- Use lowercase for commit messages
- Keep the summary line concise with a maximum of 100 characters
- Reference issue numbers when applicable

## Documentation

- Maintain clear README with the following sections:
  - Setup ( how to install and run the project )
  - Usage ( listing all the commands and how to use them )
  - Stack ( the tech stack used in the project )
  - Folder Structure ( the folder structure of the project only the important ones inside src )
